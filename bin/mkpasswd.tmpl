#!/usr/bin/env escript
%% vim: filetype=erlang

%% NOT ACTIVE
%%! -env ERL_LIBS  _build/default/lib

%%
%%    Wave - MQTT Broker
%%    Copyright (C) 2014-2016 - Guillaume Bour
%%
%%    This program is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU Affero General Public License as published
%%    by the Free Software Foundation, version 3 of the License.
%%
%%    This program is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU Affero General Public License for more details.
%%
%%    You should have received a copy of the GNU Affero General Public License
%%    along with this program.  If not, see <http://www.gnu.org/licenses/>.

%%
%% requirements:
%%   - getopt
%%   - erlpass

%%
%% purpose: manage user password
%% author: Guillaume Bour <guillaume@bour.cc>
%%

main([]) ->
    include_libs(),
    getopt:usage(options_spec_list(), escript:script_name(), "passwordfile username");
main(Args) ->
    include_libs(),
    OptsSpecList = options_spec_list(),
    run(getopt:parse(OptsSpecList, Args)).

run({ok, {Options, [File, User]}}) ->
    application:ensure_all_started(erlpass),
    do(Options, File, User);
run({ok, _}) ->
    main([]);
run({error, {Reason, Data}}) ->
    io:format("~p: ~p~n~n", [Reason, Data]),
    main([]).

% read password on stdin, and return hash version
readpass() ->
    %NOTE: not working because escript is using old io server
    io:setopts([{echo,false}]),
    {ok, [Pass]} = io:fread("Password: ", "~s"),
    erlpass:hash(Pass).

% file is truncated if exists, else created
do([create], File, User) ->
    {ok, F} = open(File, [write]),
    Hash    = readpass(),

    file:write(F, [User, $:, Hash, $\n]),
    file:close(F);

do([delete], File, User) ->
    % TODO
    {ok, F} = open(File, [read, binary]),
    case match(F, file:read_line(F), list_to_binary(User), []) of
        % nothing to do
        nomatch -> pass;

        % if user already exists, we create a temp file, copy current file except user line,
        % then replace original file
        {match, Prev} ->
            {ok, F2} = open([File,".tmp"], [write]),
            file:write(F2, Prev),
            copy(F, F2),
            file:close(F2),

            file:rename([File,".tmp"], File);

        Err ->
            io:format("> ~p~n", [Err])
    end,
    file:close(F);

% user password is updated if exists, else added
do([], File, User) ->
    {ok, F} = open(File, [read, binary]),
    Hash    = readpass(),

    case match(F, file:read_line(F), list_to_binary(User), []) of
        % just append user+hash at end of file
        nomatch ->
            {ok, F2} = open(File, [append]),
            file:write(F2, [User, $:, Hash, $\n]),
            file:close(F2);

        % if user already exists, we create a temp file, copy current file except user line,
        % then add user, and finally replace file
        {match, Prev} ->
            {ok, F2} = open([File,".tmp"], [write]),
            file:write(F2, Prev),
            copy(F, F2),

            file:write(F2, [User, $:, Hash, $\n]),
            file:close(F2),
            file:rename([File,".tmp"], File);

        Err ->
            io:format("> ~p~n", [Err])
    end,
    file:close(F);

do(_Opts, _, _) ->
    io:format("incompatible options~n"),
    pass.

open(File, Mode) ->
    case file:open(File, Mode) of
        {ok, F} -> {ok, F};

        {error, Err} ->
            case Err of
                enoent -> io:format("~s: No such file (use -c options to create file)~n", [File]);
                eacces -> io:format("~s: You don't have the rights to open the file~n", [File]);
                Err    -> io:format("~s: failed to open file~n", [Err])
            end,
            halt(1)
    end.


match(_, eof, _, _) ->
    nomatch;
% user matched
match(F, {ok, Line}, User, Acc) ->
    try
        Size = size(User),
        <<User:Size/binary, $:, _/binary>> = Line,

        {match, Acc}
    catch
        _:_ ->
            % no match, we continue
            match(F, file:read_line(F), User, [Line | Acc])
    end.

copy(F1, F2) ->
    case file:read(F1, 1000) of
        {ok, Data} ->
            file:write(F2, Data),
            copy(F1, F2);

        _ -> pass
    end.

options_spec_list() ->
    [
        {create, $c, undefined, undefined, "create password file. If already exists, it is truncated first"},
        {delete, $D, undefined, undefined, "delete the user"}
    ].

include_libs() ->
    % TODO: what about release or docker instance ?
    BaseDir = filename:dirname(escript:script_name()),
    [ code:add_pathz(Path) || Path <- filelib:wildcard(BaseDir++"/{{mkpasswd_libs_path}}/*/ebin")Â ],

    ok.
