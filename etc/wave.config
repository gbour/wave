%% vim: filetype=erlang
%% NOTE: {{xxx}} template is replaced by rebar3/relx when generating a release
%%       values are taken from config/vars.yyy.config file (relative to generated release)
%%       PATHS MUST BE RELATIVE, as variable is replace at release generation, not at execution
%%       (do not use {{output_dir}} template)

[
  {wave, [
    {plain, [
        {port, 1883}
    ]},
    {ssl, [
        {port, 8883},
        {certfile, "{{etc_dir}}/wave_cert.pem"},
        {keyfile,  "{{etc_dir}}/wave_key.pem"},

        {versions, ['tlsv1.1', 'tlsv1.2']},
        {ciphers, [
%            "ECDHE-ECDSA-AES128-SHA", "ECDHE-ECDSA-AES128-SHA256",
%            "ECDHE-ECDSA-AES256-SHA", "ECDHE-ECDSA-AES256-SHA384",
%            "ECDHE-ECDSA-AES256-SHA", "ECDHE-ECDSA-AES256-SHA384",
%            "DHE-RSA-AES256-SHA256"

% riak default ciphers
            "ECDHE-RSA-AES128-GCM-SHA256","ECDHE-ECDSA-AES128-GCM-SHA256",
            "ECDHE-RSA-AES256-GCM-SHA384","ECDHE-ECDSA-AES256-GCM-SHA384",
            "DHE-RSA-AES128-GCM-SHA256","DHE-DSS-AES128-GCM-SHA256",
            "DHE-DSS-AES256-GCM-SHA384","DHE-RSA-AES256-GCM-SHA384",
            "ADH-AES256-GCM-SHA384","ADH-AES128-GCM-SHA256",
            "ECDHE-RSA-AES128-SHA256","ECDHE-ECDSA-AES128-SHA256",
            "ECDHE-RSA-AES128-SHA","ECDHE-ECDSA-AES128-SHA","ECDHE-RSA-AES256-SHA384",
            "ECDHE-ECDSA-AES256-SHA384","ECDHE-RSA-AES256-SHA","ECDHE-ECDSA-AES256-SHA",
            "DHE-RSA-AES128-SHA256","DHE-RSA-AES128-SHA","DHE-DSS-AES128-SHA256",
            "DHE-RSA-AES256-SHA256","DHE-DSS-AES256-SHA","DHE-RSA-AES256-SHA",
            "AES128-GCM-SHA256","AES256-GCM-SHA384","ECDHE-RSA-RC4-SHA","ECDHE-ECDSA-RC4-SHA",
            "SRP-DSS-AES-128-CBC-SHA","SRP-RSA-AES-128-CBC-SHA","DHE-DSS-AES128-SHA",
            "AECDH-AES128-SHA","SRP-AES-128-CBC-SHA","ADH-AES128-SHA256","ADH-AES128-SHA",
            "ECDH-RSA-AES128-GCM-SHA256","ECDH-ECDSA-AES128-GCM-SHA256",
            "ECDH-RSA-AES128-SHA256","ECDH-ECDSA-AES128-SHA256","ECDH-RSA-AES128-SHA",
            "ECDH-ECDSA-AES128-SHA","AES128-SHA256","AES128-SHA","SRP-DSS-AES-256-CBC-SHA",
            "SRP-RSA-AES-256-CBC-SHA","DHE-DSS-AES256-SHA256","AECDH-AES256-SHA",
            "SRP-AES-256-CBC-SHA","ADH-AES256-SHA256","ADH-AES256-SHA",
            "ECDH-RSA-AES256-GCM-SHA384","ECDH-ECDSA-AES256-GCM-SHA384",
            "ECDH-RSA-AES256-SHA384","ECDH-ECDSA-AES256-SHA384","ECDH-RSA-AES256-SHA",
            "ECDH-ECDSA-AES256-SHA","AES256-SHA256","AES256-SHA","RC4-SHA",
            "DHE-RSA-CAMELLIA256-SHA","DHE-DSS-CAMELLIA256-SHA","ADH-CAMELLIA256-SHA",
            "CAMELLIA256-SHA","DHE-RSA-CAMELLIA128-SHA","DHE-DSS-CAMELLIA128-SHA",
            "ADH-CAMELLIA128-SHA","CAMELLIA128-SHA"
        ]}
    ]},
    {websocket, [
        {port, 1884},
        {ssl_port, 8884}
    ]},
    
    {auth, [
        {required, false},
        {file, "etc/wave.passwd"}
    ]},

    {acl, [
        {enabled, false},
        {file, "etc/wave.acl"}
    ]},

    {access_log, [
        {enabled, true},
        {logfile, "{{log_dir}}/wave.access.log"}
    ]},

    {modules, [
        {enabled, {{ enabled_modules }} },

        {settings, [
            {freemobile, [
                {username, "foo"},
                {password, "bar"},

                {topics, [
                    "/secu/ssh"
                ]}
            ]},

            {inotify, []}
        ]}
    ]}
  ]},

  {lager, [
    {error_logger_hwm, 50},
    {colored, true},
    {colors, [
      {debug,"\e[1;34m"},
      {info, "\e[1;32m"},
      {notice,"\e[1;36m"},
      {warning,"\e[1;33m"},
      {error,"\e[1;31m"},
      {critical,"\e[1;35m"},
      {alert,"\e[1;44m"},
      {emergency,"\e[1;41m"}
    ]},

    {handlers, [
      {lager_console_backend, [
            {{lager_console_level}}
            %{lager_default_formatter,[{eol, "\r\n"}]}
            ,{lager_default_formatter, [
                color, time, " ",
                "[", {x, "", [severity,{blank, "]"}], 7}, " ",
                {x, "", [{pid, ""}], 9}, " ",
                {module, [
                     module,
                     {function, [":", function], ""},
                     {line, [":",line], ""},
                " "], ""},
                message, "\n"]}
      ]}
      {{{lager_extra_handlers}}}
    ]}
  ]},

  {sharded_eredis, [
          {global_or_local, local},
          {pools, [
                   {pool0, [
                              {size, 10},
                              {max_overflow, 20},
                              {host, "{{ redis_server }}" },
                              {port, {{ redis_port }} }
                             ]}
                  ]}
    ]},

  {exometer, [
    {interval, {{exometer_interval}}},

    {predefined, [
        %% ERLANG VM stats
        % vm stats
        {[erlang, memory], {function, erlang, memory, [], proplist, [total, processes, ets]}, []},
        {[erlang, system_info],
            {function, erlang, system_info, ['$dp'], value, [port_count, process_count, thread_pool_size]},
            []
        },
        % io stats
        {[erlang, io],
            %NOTE: put space between double '{' or '}' not to be interpreted as template variable
            {function, erlang, statistics, [io], match, { {'_',input},{'_', output} } },
            []
        },
        % run queues
        {[erlang, statistics],
            {function, erlang, statistics, ['$dp'], value, [run_queue]},
            []
        },

        % uptime

        %% WAVE specific stats
        % active and offline sessions (clients disconnected w/ clean session off)
        {[wave,sessions]            , {function, wave_metrics, get, ['$dp'], tagged, [active,offline]}, []}, 
        
        % connection attempts (since broker start & per minutep)
        {[wave,connections,tcp]     , spiral, []}, % using TCP transport
        {[wave,connections,ssl]     , spiral, []}, % using SSL transport
        {[wave,connections,ws]      , spiral, []}, % using WebSocket transport

        {[wave,packets,received]    , spiral, []}, % received packets (any kind; since broker start & per minute)
        {[wave,packets,sent]        , spiral, []}, % sent packets (any kind; since broker start & per minute)

        % received PUBLISH messages per qos (since broker start, and per minute)
        {[wave,messages,in,0]       , spiral, []},
        {[wave,messages,in,1]       , spiral, []},
        {[wave,messages,in,2]       , spiral, []},

        % sent PUBLISH messages per qos (since broker start and per minute)
        {[wave,messages,out,0]      , spiral, []},
        {[wave,messages,out,1]      , spiral, []},
        {[wave,messages,out,2]      , spiral, []},

        {[wave,messages,inflight]   , counter, []},   % total active inflight messages  (instant value)
        % total retained & stored (retained+offline) messages (instant value)
        {[wave,messages]            , {function, wave_metrics, get, ['$dp'], tagged, [retained,stored]}, []},
        {[wave,subscriptions]       , gauge  , []}   % total active subscriptions (instant value)

      ]},

      {report, [
          {reporters, [{exometer_report_statsd, []}]}
          %NOTE: subscribers is automatically provisionned from predefined on wave startup
%          {subscribers, [
%              {exometer_report_statsd, [erlang, memory], [total,ets], 1000},

%              {exometer_report_statsd, [wave,sessions], value, 1000},
%               {exometer_report_statsd, [wave,in,publish,0], one, 1000},
%               {exometer_report_statsd, [wave,in,publish,1], one, 1000},
%               {exometer_report_statsd, [wave,in,publish,2], one, 1000}
%          ]}
      ]}
  ]}

].
