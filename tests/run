#!/usr/bin/python
# -*- coding: utf8 -*-

import os
import sys
import time
import redis
import inspect
import logging
import threading

import TestSuite
import testsuite
from lib import env

from twisted.internet import reactor, defer
import twotp

#from testsuite import *
#from testsuite import plop
COUNTERS = {'passed': 0, 'failed': 0, 'skipped': 0}

def setup_logger():
    DEBUG    = os.environ.get('DEBUG', '0')
    WAVELOGS = os.environ.get('WAVELOGS', '0')

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    #fmt = logging.Formatter("%(func)s%(message)s")
    # console
    h = logging.StreamHandler(stream=sys.stdout)
    h.setLevel(logging.DEBUG if DEBUG == '1' else logging.INFO)
    #h.setFormatter(fmt)
    logger.addHandler(h)

    # file
    if DEBUG not in ('0','1'):
        h = logging.FileHandler(DEBUG)
        h.setLevel(logging.DEBUG)
        #h.setFormatter(fmt)
        logger.addHandler(h)

    # wave logs
    if WAVELOGS:
        h = logging.FileHandler(WAVELOGS)
        h.setLevel(logging.DEBUG)
        #h.setFormatter(fmt)
        logger.addHandler(h)

def update_counters(update):
    for k, v in update.iteritems():
        COUNTERS[k] = COUNTERS.get(k, 0) + v

def print_summary():
    print "\n  \033[1;42;30m {passed} ᴘᴀssᴇᴅ \033[0m \033[41;37m {failed} ғᴀɪʟᴇᴅ \033[0m \033[1;43;30m {skipped} sᴋɪᴘᴘᴇᴅ \033[0m\n".format(**COUNTERS)


def setup_db():
    env.db = redis.Redis(host='localhost', port=6379, db=0)
    #logging.debug("Redis: {0}".format(env.db.info('keyspace')))

def setup_twotp(node, cookie):
    return twotp.Process(node, cookie)


STATUS = True

@defer.inlineCallbacks
def run_tests():
    global STATUS

    modfilter = None
    if len(sys.argv) > 1:
        modfilter = sys.argv[1]

    testfilter = None
    if len(sys.argv) > 2:
        testfilter = sys.argv[2]

    for (modname, mod) in inspect.getmembers(testsuite, predicate=inspect.ismodule):
        if modfilter and not modfilter in modname:
            continue

        for (clsname, cls) in inspect.getmembers(mod, predicate=inspect.isclass):
            #mro = inspect.getmro(cls)
            #if len(mro) < 2 or mro[1] != TestSuite.TestSuite:
            if not issubclass(cls, TestSuite.TestSuite) or cls == TestSuite.TestSuite:
                continue

            #print modname,clsname, inspect.getmro(cls)
            (ret, counters) = yield cls().run(testfilter)
            STATUS = ret and STATUS
            update_counters(counters)

    print_summary()
    reactor.stop()

if __name__ == '__main__':
    setup_logger()
    setup_db()
    env.twotp = setup_twotp('wave_tests@127.0.0.1', 'wave')

    def on_reactor_started():
        # launching unittests in a dedicated thread
        t = threading.Thread(target=run_tests)
        t.start()
        t.join()

    reactor.callWhenRunning(on_reactor_started)
    reactor.run()

    # reactor ended
    sys.exit(0 if STATUS else 11)
